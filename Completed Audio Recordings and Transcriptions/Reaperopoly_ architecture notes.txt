 Repropaling. So part of the setup we have to do is since there's going to be multiple branches and sources of projects that come out of repropaling, it's creating a GitHub resource branch that's going to be for the assets. This is going to be for the artwork and images that's going to be curated through D&O and the art team, meaning such that they'll be maintaining a Git based repo of the art files and their artistry and their generated files such that the art work for each of the different cards, the levels and so on is done in a way that it generates through this repository in the folder structure to be files that are accessible in our other projects. That way in say our website project of Git, we actually are referencing our asset folder to being that GitHub library from the art side of things, near the art repo, as well as for the Unity engine being assets that we draw from would also go from that art repo. This allows our art team to work in their own repository and us to develop scripting on that side to do automatic image generation and scaling out and creating the vectors and the different models that can be then reused through the other components projects. Once again the idea is that as an overall view, Reproply is going to be re implemented in many different languages such as how I jake when I started making Reproply Eski, some of those base settings, those base rules that are global to the things, these are things that we want to make into their own repositories so that we define them in a global structure, each being based on Git so that any changes to the idea of how Reproply itself is based, the rules are repropably can cascade through these multiple variations of projects these multiple Git and having the continuous integration and continuous deployment set up for each of these various needs and compartmentalize that way so like in the artist stack, you can have continuous integration and deployment based on tests that are purely on making sure that the image generation works correctly that those components are all isolated and didn't test that power that section this creates us a broad set of tooling that's very cheap and easy to manage in the long run as it's test driven development at each of the different layers of the onion forward development. Each of these components like I'm talking about now should we turn into episodes on the Lord Summer Hackers layer channel talking about creating game development and the theory behind it those could also then be episodes on the Reproply channel featuring Lord Summer as character talking about implementing these things utilizing those methodologies of the teachings because we want to have it be that there's a members only area for Lord Summer for Reproply for these various different channels having different patreon accounts having members only areas etc and also me all of that having tied into our own Reaper Tube clones and monetization methods we make for our own video platforms so we are restreaming this stuff to these things there's good resource restream.io to allow us to recent our streams to multiple sources like Twitch YouTube etc and we want to build that support in natively for each of our projects this is once again goes back to the idea of you know documenting the whole process of the game dev and creating that into content that spreads throughout our media network because there's no telling when or if those channels or in these videos gain traction but for us it's about telling our story both publicly and privately depending how we set different videos about telling that story and having that backlog of content such that long run you know when we're a thousand iterations deep into this you click that and there's only thing you know it may have been not worth anything to anybody when we only had 10 episodes or 100 episodes but we had that thousand episodes mark now it's suddenly worth money because we've been doing a continuous interdevelopment methodology as we follow essentially our own version of the agile principles and it's to be a reflection of all of that and it's a lot of this is figuring out through structuring our media elements and our source code repositories and setting this up for the framework they're me doing over the next couple of months getting this set up the correct ways to be a modern development team and development studio based out of grip PR and then grit the United States doing the development services for our ultimate clients we should be rebroccoli projects for five and three ventures or zimcom etc.