 Reproply the roleplaying game. So it's more developer notes. Once again the initial versions of the digital version of the game is the website playing the Reproply board. But the roleplaying game version is going to be based out of unity where one of the levels will be playing Reproply. Simulatory is in the website but where you can roleplay as this hook and so you can drive around say as the grim reaper or the site etc. you can play as your token and you can do that first version view ultimately wanting that to be compatible with VR and AR. Frinner action or if they're doing it on PC along it to be a roleplaying game. It's like to also have Reproply their to be the ability to have more of a 2D or a 3D map version of viewing it. So depending on the type of player and their viewer as it determine when we go into these various mini games what goes on. So in the Reproply RPG essentially Reproply World is going to be our metaverse that's based on real data that we source from public reliable data about where properties are houses are buildings and all of this data is meant to be stored in our multi document database through the Rango DB as well as the anti absolute value database website specialization we've got the PROC system to where this data is based on a time span and time to events such that in the long run we're wanting to support the idea in the Reproply World of time travel being possible such that when you shift the time clock of the game which can only be done you're playing as a time lord or being a hacker like Lord Summary maybe your as Lord Summary you go to a computer interface and you run a command change the time whereas if you're a time lord character role playing you have to go into what our version of a TARDIS would be which should be in our case one of the cars the room Reaper cars where you'd set the time similar to how and back to the future they've got the Delorean he sets the time functions so these types of very specialized game mechanics will affect everything in the game so if you choose to utilize those time movements that's gonna really affect stuff especially being a multiplayer environment this is why the vision is that Reaper Oplie is going to have a public instance that's running and running a certain game speed it's gonna cycle and it's a cycle through time essentially as we build out more of a data set of previous events of humanity in history that we pull in that feeds into being the data sets that procedurally generate the world and leads to the creation of the map and the understanding of the world the idea behind all of this is that as you run a simulation of Reaper Oplie we're essentially creating a copy of the world in Iraq's but making multiple mini games and many interactions to where in the role playing game you're playing Reaper Oplie with the intention of doing the capitalist idea of taking over everything so say you're playing in the Reaper Oplie RPG as your own character and there's a building you want to buy like in my case it's a Reaper I want to purchase the shoreline hotel and the Gwynn building Cincinnati well I would interact with the owners of those buildings that are registered inside the Reaper Oplie world that information and the names of those people in companies we based on public record and they created avatars that have AI behind them but the cool thing with Reaper Oplie would be that you could spend Reaper Sovereign so that any person out there could choose to take over that character and be their side of the negotiation such that me playing as a Grim Reaper trying to buy that hotel well another player could choose to be the owner of the other side they could spend their credits and block my deal or change the pricing and that's part of the game and moving over the different factions is buying up the control of these various different AI bots and the revenue to it so if your faction controls a hotel or owns a business of the business is sharing profit based on eternal game mechanics like Reaper Sovereign's that will lead to your group game money so the whole idea is that in the role playing game it's going to be a leaderboard where you're going to be showing you know who are the richest people who are the richest groups the strongest corporations etc to create that competitive gameplay one of the key goals all of this is that you have to remember we're ultimately building the Reaper AI and particularly wanting to build out our own versions of codex slash like the GBT3 language models these shop bots that can generate code and generate text and video and images right now in the beginning we're in leverage the existing systems that are out there and this is where with C Shark we'll dependency injection to allow us to over time three generations improve our generation of our map our world our images and our content to create a truly dynamic system that's constantly changing and has the interactions going the idea being that eventually we've got this goes to the get hub like autocomplete stuff leveraging up our talent war resisting code and my own code as well as building out AI that understands our coding style to generate code that's inside the rebroperly framework in the Reaper name space remember this whole name space and this is set of library code it's going to power not to be properly but the various websites of the rebroper.com or somewhere.com etc your mind's eye and the new ecommerce platforms expands out from the proxistum was developed back 2005. So a lot of this is going to be a process that's going to take several years to develop but each level of automation that we're able to do and the scripting and building out these language models code generation sort of allow us to constantly improve and it's where we've got to be very careful with how we structure our get repositories I want to make sure that we're creating either branches or separate repositories to keep the code that's generated by these various pieces that we use and the scripts of those separated off in their own branches so that way we can curate our main branch of code that stuff that as our own developers we have approved we've created ourselves to be that master copy so that we never in a situation where the code generates stuff that could take over or do not have various things we would always have that ability to roll back and be able to see that through or get history. There's a lot of architects to go along with this a lot to figure out that's why from the beginning it's going to be a focus in creating that framework and creating a very basic version of this and so why we'll be creating the initial map is just being you know the repropply board and playing with basically essential monopoly rules before we create the repropply world and then get into creating the other levels for various many games you know like one of the many games might be a stock trading floor it could be a strip club it could be a drag racing place you know various things that represent experiences that I enjoy my lifetime you know obviously one of those can be array music events you know these can be various levels and stuff such that in the repropply world when you enter into a building the type of building it is would then determine which level we end up using and hopefully some of these levels can be procedurally generated or you've just got a collection of them to have different styles throughout and that's where over time we create a density of this stuff it's where it's going to be really important to having clean data sets of what is historical facts the sort of records and building parsers of those that feed into like codex and GBT3 for generating as much as possible but where we would have a branch of our source deposits where it being a historical data that's fact that's kept as a valid ledger long term ultimately wanting to do a blockchain implementation to where there's a distributed ledger of the changes as the world goes on as your properly gets into being our own events not just historical and public data some of the dynamics that I want to implement is going to be you know our fictional character the grim reaper two M's for managing money would occur when a player object in the game ever dies or goes bankrupt it's going to spawn a grim reaper just show up right next to them that can interact with in that dead state to negotiate for whether or not the grim reapers from accept they're going to have an hell or allow them to reboot and respond the game and that'll all be based back on the reapers sovereigns token economy which initially is going to be in game currency but eventually will be our crypto currency so we're literally going to have the grim reaper in our game be a real thing I'd like even to be a thing that when somebody's hitting close to death or close to you know right now if money maybe it spawns one of my grim reapers that starts following them for behind maybe we may transparency on the grim reaper character model increase the closer to death you know that shadow if it's that shadow person following them and mimicking them we could do some fun playful things like that when you make this be a whole lot of trolling built into the game something mechanics I want to implement in this and some of the levels is going to be some prior game ideas I had such as riot from years ago which is based on the events since I riots I live through here and the idea of being the role play the various actors that happens in an anti of creating those riots and how it was handled so it goes back to our idea of utilizing historical data and public record and information to recreate characters and amateurs in the game and assigning those roles to AI bots or playable characters or characters have been taken over that are playing out certain roles that we define you know something as simple as being a cop or being a fireman or being a mayor a politician a businessman a stockbroker each of these different things will be classifications of people and attributes we assign over time that will affect the different AI and the capabilities that they have to make this game truly dynamic and be a reason as to why you want to take over or engage these different characters in the game through you know political influence money influence etc and building out that whole relationship system it's very much to mimic society and the dynamics that we have as humans have in the attributes of humanity that you know we perceive judgment from one another on those being things that you know we define as attributes of these player characters but how they treat one another to be based on different traits that we assign you know if somebody is a beach to you to you friendly whether they're conservative or public in their liberal I want to be able to create scripts and code in mind that reflect these various organizations and their styles their impacts as much possible based on public data or eventually partnering with those organizations to where they create the input such that those scripts directly reflect the methodology using ideologies of their organizations to be represented properly part of the nighritty elements of how we do this interaction with these various AI code generation models is to create a framework essentially to where we create scripts that allow us to have in one repository the prompts that we feed in to these AI processes and the AI process controllers will be the API code to call out to code acts or GitHub or venture the river AI code generation keeping a separate data sets of what was the input prompts and then the output responses that out of me the code which are then reversing control through Git so we can see how that evolves over time and then anticipating is that these folders of generated code will then go through a continuous integration process to where they have to pass unit testing before they can be merged into the branches of the main code allowing us to keep a record history of knowing what stuff was generated was approved and by whom and that's why we'll be using classes that we extend such that you know maybe the AI generates a certain level of base functionality having the code that our team curates and manually does out there be extending that code or being the base classes to it to write it it's quite a tricky balance to keep all these things together but dependency injection C sharp is going to help us quite a bit here and doing a heavy level of instantiating various interfaces and base classes